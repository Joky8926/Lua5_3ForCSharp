
class lctype {
	const int ALPHABIT = 0;
	const int DIGITBIT = 1;
	const int PRINTBIT = 2;
	const int SPACEBIT = 3;
	const int XDIGITBIT = 4;

	static readonly byte[] luai_ctype_ = {
		0x00,  /* EOZ */
		0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,	/* 0. */
		0x00,  0x08,  0x08,  0x08,  0x08,  0x08,  0x00,  0x00,
		0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,	/* 1. */
		0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
		0x0c,  0x04,  0x04,  0x04,  0x04,  0x04,  0x04,  0x04,	/* 2. */
		0x04,  0x04,  0x04,  0x04,  0x04,  0x04,  0x04,  0x04,
		0x16,  0x16,  0x16,  0x16,  0x16,  0x16,  0x16,  0x16,	/* 3. */
		0x16,  0x16,  0x04,  0x04,  0x04,  0x04,  0x04,  0x04,
		0x04,  0x15,  0x15,  0x15,  0x15,  0x15,  0x15,  0x05,	/* 4. */
		0x05,  0x05,  0x05,  0x05,  0x05,  0x05,  0x05,  0x05,
		0x05,  0x05,  0x05,  0x05,  0x05,  0x05,  0x05,  0x05,	/* 5. */
		0x05,  0x05,  0x05,  0x04,  0x04,  0x04,  0x04,  0x05,
		0x04,  0x15,  0x15,  0x15,  0x15,  0x15,  0x15,  0x05,	/* 6. */
		0x05,  0x05,  0x05,  0x05,  0x05,  0x05,  0x05,  0x05,
		0x05,  0x05,  0x05,  0x05,  0x05,  0x05,  0x05,  0x05,	/* 7. */
		0x05,  0x05,  0x05,  0x04,  0x04,  0x04,  0x04,  0x00,
		0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,	/* 8. */
		0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
		0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,	/* 9. */
		0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
		0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,	/* a. */
		0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
		0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,	/* b. */
		0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
		0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,	/* c. */
		0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
		0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,	/* d. */
		0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
		0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,	/* e. */
		0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
		0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,	/* f. */
		0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,
	};

	static int MASK(int B) {
		return 1 << B;
	}

	/*
	** add 1 to char to allow index -1 (EOZ)
	*/
	static int testprop(byte c, int p) {
		return luai_ctype_[c + 1] & p;
	}

	public static bool lisdigit(byte c) {
		return testprop(c, MASK(DIGITBIT)) != 0;
	}

	public static bool lisspace(byte c) {
		return testprop(c, MASK(SPACEBIT)) != 0;
	}

	public static bool lisxdigit(byte c) {
		return testprop(c, MASK(XDIGITBIT)) != 0;
	}

	/*
	** this 'ltolower' only works for alphabetic characters
	*/
	public static byte ltolower(byte c) {
		return (byte)(c | ('A' ^ 'a'));
	}
}
